import type { AstroI18nConfig, ConfigTranslationLoadingRules, ConfigRoutes, ConfigTranslationDirectory, ConfigTranslations, SerializedConfig } from "../../../core/config/types";
declare class Config implements AstroI18nConfig {
    primaryLocale: string;
    secondaryLocales: string[];
    fallbackLocale: string;
    showPrimaryLocale: boolean;
    trailingSlash: "always" | "never";
    run: "server" | "client+server";
    translations: ConfigTranslations;
    translationLoadingRules: ConfigTranslationLoadingRules;
    translationDirectory: ConfigTranslationDirectory;
    routes: ConfigRoutes;
    path: string;
    srcDir: string;
    constructor({ primaryLocale, secondaryLocales, fallbackLocale, showPrimaryLocale, trailingSlash, run, translations, translationLoadingRules, translationDirectory, routes, srcDir, }?: Partial<AstroI18nConfig>, path?: string);
    get pages(): string[];
    static fromFilesystem(configPath?: string | null): Promise<Config>;
    /**
     * Loads all translations & routes from the filesystem and merges them into
     * the config
     */
    loadFilesystemTranslations(): Promise<this>;
    toClientSideObject(): SerializedConfig;
    toObject(): {
        primaryLocale: string;
        secondaryLocales: string[];
        fallbackLocale: string;
        showPrimaryLocale: boolean;
        trailingSlash: "always" | "never";
        run: "server" | "client+server";
        translations: ConfigTranslations;
        translationLoadingRules: ConfigTranslationLoadingRules;
        translationDirectory: ConfigTranslationDirectory;
        routes: ConfigRoutes;
    };
    toString(): string;
}
export default Config;
