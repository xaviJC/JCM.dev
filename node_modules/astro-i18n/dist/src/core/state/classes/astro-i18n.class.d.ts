import Config from "../../../core/config/classes/config.class";
import TranslationBank from "../../../core/translation/classes/translation-bank.class";
import SegmentBank from "../../../core/routing/classes/segment-bank.class";
import type { AstroI18nConfig, ConfigRoutes, ConfigTranslationLoadingRules, ConfigTranslations } from "../../../core/config/types";
import type { Formatters, TranslationProperties } from "../../../core/translation/types";
declare class AstroI18n {
    #private;
    constructor();
    /** The detected runtime environment. */
    get environment(): string;
    /** The current page route. */
    get route(): string;
    /** The current page route. */
    set route(route: string);
    /** All page routes. For example: `["/", "/about", "/posts/[slug]"]` */
    get pages(): string[];
    /**
     * The equivalent page for the current route. For example if route is equal
     * to `"/posts/my-cool-cat"` this could return `"/posts/[slug]"`.
     */
    get page(): string | null;
    /** The current page locale. */
    get locale(): string;
    /** All configured locales. */
    get locales(): string[];
    /** The default/primary locale. */
    get primaryLocale(): string;
    /** Locales other than the default/primary one. */
    get secondaryLocales(): string[];
    /**
     * The fallback locale, when a translation is missing in a locale the
     * fallback locale will be used to find a replacement.
     */
    get fallbackLocale(): string;
    /** True when astro-i18n is initialized. */
    get isInitialized(): boolean;
    /** If you touch this, you're on your own. */
    get internals(): {
        toHtml: () => string;
        config: Config;
        segments: SegmentBank;
        translations: TranslationBank;
        splitLocaleAndRoute: (route: string) => {
            locale: string | null;
            route: string;
        };
        toString: () => string;
        waitInitialization: () => Promise<unknown>;
        setPrivateProperties: (properties?: {
            locale?: string;
            route?: string;
            isGetStaticPaths?: boolean;
            origin?: string;
        }) => void;
        reinitalize: (config?: string | Partial<AstroI18nConfig> | undefined, formatters?: Formatters) => Promise<void>;
        getAndClearRedirection: () => Response | null;
    };
    /**
     * @param key The translation key, for example
     * `"my.nested.translation.key"`.
     * @param properties An object containing your interpolation variables
     * and/or your variants, for example `{ variant: 3, interpolation: "text" }`.
     * @param options `route`: Overrides the current route, you will be able
     * to access that route's translations. `locale`: Overrides the current
     * locale, this allows you to control which language you want to translate
     * to. `fallbackLocale`: Overrides the fallback locale.
     */
    t(key: string, properties?: TranslationProperties, options?: {
        route?: string;
        locale?: string;
        fallbackLocale?: string;
    }): string;
    /**
     * @param route A route in any of the configured languages, for example
     * `"/en/my/english/route/[param]"`.
     * @param parameters An object containing your route parameters, for example
     * `{ slug: "my-blog-post-slug" }`.
     * @param options `targetLocale`: Overrides the target locale. `routeLocale`:
     * Overrides the given route locale, this is useful if astro-i18n cannot
     * figure out the route's locale. `showPrimaryLocale`: Overrides the
     * showPrimaryLocale parameter. `query`: Adds these query parameters at the
     * end of the translated route.
     */
    l(route: string, parameters?: Record<string, unknown>, options?: {
        targetLocale?: string;
        routeLocale?: string;
        showPrimaryLocale?: boolean;
        query?: Record<string, unknown>;
    }): string;
    /** Adds new translations at runtime. */
    addTranslations(translations: ConfigTranslations): this;
    /** Adds new translation formatters at runtime. */
    addFormatters(formatters: Formatters): this;
    /** Adds new translation loading rules at runtime. */
    addTranslationLoadingRules(translationLoadingRules: ConfigTranslationLoadingRules): this;
    /** Adds new route segment translations at runtime. */
    addRoutes(routes: ConfigRoutes): this;
    /**
     * Tries to parse one of the configured locales out of the given route.
     * If no configured locale is found it will return \`null\`.
     */
    extractRouteLocale(route: string): string | null;
    /**
     * Redirects the user to the given destination.
     */
    redirect(destination: string | URL, status?: number): void;
    /** Initializes astro-i18n on the server-side. */
    initialize(config?: Partial<AstroI18nConfig> | string | undefined, formatters?: Formatters): Promise<void>;
}
export default AstroI18n;
