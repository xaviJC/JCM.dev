import type { TranslationProperties, VariantProperties, VariantProperty } from "../../../core/translation/types";
declare class Variant {
    raw: string;
    priority: number;
    properties: VariantProperty[];
    value: string;
    constructor({ raw, priority, properties, value }?: VariantProperties);
    /**
     * @param variant The variant part of the translation, for example for a
     * variant string `"{{ prop1: true }}"` only `"prop1: true"` should be
     * passed.
     * @param value The translation value, this will only be stored for later
     * retrieval.
     */
    static fromString(variant: string, value: string): Variant;
    /**
     * Calculates the variant's matching score for the given properties.
     */
    calculateMatchingScore(properties: TranslationProperties): number;
}
export default Variant;
